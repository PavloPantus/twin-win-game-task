{"version":3,"sources":["components/GameSlot/GameSlot.js","components/GameMachine/GameMachine.js","App.js","index.js"],"names":["GameSlot","_ref","setAnimationCountHandler","animationMove","animationStopSlot","slides","winLineTop","winLineMiddle","winLineBottom","react_default","a","createElement","className","onAnimationIteration","classNames","animation-move","animation-stop","map","img","key","src","path","alt","GameMachine","setResults","currentSlides","useMemo","i","push","concat","toString","Math","random","getNewOrderSlides","newSlides","oldSlides","Object","toConsumableArray","slice","_loop","min","max","randomIndex","indexOf","length","floor","filter","elem","index","_useState","useState","_useState2","slicedToArray","slotItems1","setSlotItems1","_useState3","_useState4","animationMoveSlot1","setAnimationMoveSlot1","_useState5","_useState6","animationCount1","setAnimationCount1","_useState7","_useState8","animationStopSlot1","setAnimationStopSlot1","_useState9","_useState10","winLineTopSlot1","setWinLineTopSlot1","_useState11","_useState12","winLineMiddleSlot1","setwinLineMiddleSlot1","_useState13","_useState14","winLineBottomSlot1","setwinLineBottomSlot1","_useState15","_useState16","slotItems2","setSlotItems2","_useState17","_useState18","animationMoveSlot2","setAnimationMoveSlot2","_useState19","_useState20","animationCount2","setAnimationCount2","_useState21","_useState22","animationStopSlot2","setAnimationStopSlot2","_useState23","_useState24","winLineTopSlot2","setWinLineTopSlot2","_useState25","_useState26","winLineMiddleSlot2","setwinLineMiddleSlot2","_useState27","_useState28","winLineBottomSlot2","setwinLineBottomSlot2","_useState29","_useState30","slotItems3","setSlotItems3","_useState31","_useState32","animationMoveSlot3","setAnimationMoveSlot3","_useState33","_useState34","animationCount3","setAnimationCount3","_useState35","_useState36","animationStopSlot3","setAnimationStopSlot3","_useState37","_useState38","winLineTopSlot3","setWinLineTopSlot3","_useState39","_useState40","winLineMiddleSlot3","setwinLineMiddleSlot3","_useState41","_useState42","winLineBottomSlot3","setwinLineBottomSlot3","_useState43","_useState44","slotItems4","setSlotItems4","_useState45","_useState46","animationMoveSlot4","setAnimationMoveSlot4","_useState47","_useState48","animationCount4","setAnimationCount4","_useState49","_useState50","animationStopSlot4","setAnimationStopSlot4","_useState51","_useState52","winLineTopSlot4","setWinLineTopSlot4","_useState53","_useState54","winLineMiddleSlot4","setwinLineMiddleSlot4","_useState55","_useState56","winLineBottomSlot4","setwinLineBottomSlot4","_useState57","_useState58","slotItems5","setSlotItems5","_useState59","_useState60","animationMoveSlot5","setAnimationMoveSlot5","_useState61","_useState62","animationCount5","setAnimationCount5","_useState63","_useState64","animationStopSlot5","setAnimationStopSlot5","_useState65","_useState66","winLineTopSlot5","setWinLineTopSlot5","_useState67","_useState68","winLineMiddleSlot5","setwinLineMiddleSlot5","_useState69","_useState70","winLineBottomSlot5","setwinLineBottomSlot5","_useState71","_useState72","startGame","setStartGame","_useState73","_useState74","showResult","setShowResult","useEffect","setTimeout","timeGapBetweanSlots","defaultMaxAnimationCount","textResult","gameResultPoints","topPoints","lastTopResult","_len","arguments","winLines","Array","_key","middlePoints","lastMiddleResult","bottomPoints","lastBottomResult","getResultPoints","GameSlot_GameSlot_GameSlot","type","onClick","App","gameResults","setGameResults","GameMachine_GameMachine_GameMachine","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.5aba6faf.chunk.js","sourcesContent":["import React from 'react';\nimport './GameSlot.scss';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const GameSlot = (\n  {\n    setAnimationCountHandler,\n    animationMove,\n    animationStopSlot,\n    slides,\n    winLineTop,\n    winLineMiddle,\n    winLineBottom,\n  }\n) => (\n  <div className=\"container\">\n    {\n      winLineTop\n        && <div className=\"winLineTop\" />\n    }\n\n    {\n      winLineMiddle\n        && <div className=\"winLineMiddle\" />\n    }\n\n    {\n      winLineBottom\n        && <div className=\"winLineBottom\" />\n    }\n    <div\n      onAnimationIteration={() => {\n        setAnimationCountHandler();\n      }}\n      className={\n        classNames(\n          [\n            'slot',\n            {\n              'animation-move': animationMove,\n              'animation-stop': animationStopSlot,\n            },\n          ]\n        )\n      }\n\n    >\n      {slides.map(img => (\n        <img\n          key={img.key}\n          src={img.path}\n          alt=\"\"\n        />\n      ))}\n    </div>\n  </div>\n\n);\n\nGameSlot.propTypes = {\n  setAnimationCountHandler: PropTypes.func.isRequired,\n  animationMove: PropTypes.bool.isRequired,\n  animationStopSlot: PropTypes.bool.isRequired,\n  slides: PropTypes.arrayOf(PropTypes.shape({\n    path: PropTypes.string.isRequired,\n    key: PropTypes.oneOfType([\n      PropTypes.string, PropTypes.number,\n    ]).isRequired,\n  })).isRequired,\n  winLineTop: PropTypes.bool.isRequired,\n  winLineMiddle: PropTypes.bool.isRequired,\n  winLineBottom: PropTypes.bool.isRequired,\n};\n","import React, { useMemo, useState, useEffect } from 'react';\nimport './GameMachine.scss';\nimport PropTypees from 'prop-types';\nimport { GameSlot } from '../GameSlot';\n\nexport const GameMachine = ({ setResults }) => {\n  /* default array with pathes to images, it's items will be in slots */\n  const currentSlides = useMemo(\n    () => {\n      const slides = [];\n\n      for (let i = 1; i <= 13; i += 1) {\n        slides.push({\n          path: `images/game-images/(${i}).jpg`,\n          key: i.toString() + Math.random() * Math.random(),\n        });\n      }\n\n      for (let i = 0; i < 3; i += 1) {\n        slides.push({\n          path: slides[i].path, key: Math.random() * Math.random(),\n        });\n      }\n\n      return slides;\n    }, []\n  );\n\n  /* function gives new Array of slides that is randomly completed */\n\n  const getNewOrderSlides = () => {\n    const newSlides = [];\n    let oldSlides = [...currentSlides.slice(0, 13)];\n\n    for (let i = 0; i < 13; i += 1) {\n      const selfRandom = (min, max) => (\n        Math.floor(Math.random() * (max - min + 1)) + min\n      );\n\n      const randomIndex = oldSlides\n        .indexOf(oldSlides[selfRandom(0, oldSlides.length - 1)]);\n\n      newSlides.push(oldSlides[randomIndex]);\n\n      oldSlides = oldSlides.filter(\n        (elem, index) => index !== randomIndex\n      );\n    }\n\n    for (let i = 0; i < 3; i += 1) {\n      newSlides.push({\n        path: newSlides[i].path,\n        key: Math.random() * Math.random(),\n      });\n    }\n\n    return newSlides;\n  };\n\n  /* here are states for 5 slots, includes\n  *   where: slotItems - current items that will show in slot;\n  *\n  *   animationMoveSlot - boolean indicates on add class animation move or not\n  *   to slot;\n  *\n  *   animationCount - count of first animation iterations,\n  * (that one is infinite);\n  *\n  *   animationStopSlot - add second animation, animation-stop class, that\n  *  is not infinite;\n  *\n  *  winLine top, bot, middle - add win lines classes (\n  * if slot item has equal\n  * neighborhoods)\n  *\n  *\n  *\n  *\n  *   */\n\n  const [slotItems1, setSlotItems1] = useState(getNewOrderSlides());\n  const [animationMoveSlot1, setAnimationMoveSlot1] = useState(false);\n  const [animationCount1, setAnimationCount1] = useState(0);\n  const [animationStopSlot1, setAnimationStopSlot1] = useState(false);\n  const [winLineTopSlot1, setWinLineTopSlot1] = useState(false);\n  const [winLineMiddleSlot1, setwinLineMiddleSlot1] = useState(false);\n  const [winLineBottomSlot1, setwinLineBottomSlot1] = useState(false);\n\n  const [slotItems2, setSlotItems2] = useState(getNewOrderSlides());\n  const [animationMoveSlot2, setAnimationMoveSlot2] = useState(false);\n  const [animationCount2, setAnimationCount2] = useState(0);\n  const [animationStopSlot2, setAnimationStopSlot2] = useState(false);\n  const [winLineTopSlot2, setWinLineTopSlot2] = useState(false);\n  const [winLineMiddleSlot2, setwinLineMiddleSlot2] = useState(false);\n  const [winLineBottomSlot2, setwinLineBottomSlot2] = useState(false);\n\n  const [slotItems3, setSlotItems3] = useState(getNewOrderSlides());\n  const [animationMoveSlot3, setAnimationMoveSlot3] = useState(false);\n  const [animationCount3, setAnimationCount3] = useState(0);\n  const [animationStopSlot3, setAnimationStopSlot3] = useState(false);\n  const [winLineTopSlot3, setWinLineTopSlot3] = useState(false);\n  const [winLineMiddleSlot3, setwinLineMiddleSlot3] = useState(false);\n  const [winLineBottomSlot3, setwinLineBottomSlot3] = useState(false);\n\n  const [slotItems4, setSlotItems4] = useState(getNewOrderSlides());\n  const [animationMoveSlot4, setAnimationMoveSlot4] = useState(false);\n  const [animationCount4, setAnimationCount4] = useState(0);\n  const [animationStopSlot4, setAnimationStopSlot4] = useState(false);\n  const [winLineTopSlot4, setWinLineTopSlot4] = useState(false);\n  const [winLineMiddleSlot4, setwinLineMiddleSlot4] = useState(false);\n  const [winLineBottomSlot4, setwinLineBottomSlot4] = useState(false);\n\n  const [slotItems5, setSlotItems5] = useState(getNewOrderSlides());\n  const [animationMoveSlot5, setAnimationMoveSlot5] = useState(false);\n  const [animationCount5, setAnimationCount5] = useState(0);\n  const [animationStopSlot5, setAnimationStopSlot5] = useState(false);\n  const [winLineTopSlot5, setWinLineTopSlot5] = useState(false);\n  const [winLineMiddleSlot5, setwinLineMiddleSlot5] = useState(false);\n  const [winLineBottomSlot5, setwinLineBottomSlot5] = useState(false);\n\n  /* responsible for starting game process */\n  const [startGame, setStartGame] = useState(false);\n\n  /* show results */\n  const [showResult, setShowResult] = useState(false);\n\n  /* indicates how long to rotate slot */\n  const defaultMaxAnimationCount = 0;\n\n  /* indicates on gap betwean startin rotation of different slots */\n  const timeGapBetweanSlots = 100;\n\n  /* next 5 useEffects are handle adding stop animation\n  class(second animation) */\n\n  useEffect(() => {\n    if (animationCount1 > defaultMaxAnimationCount) {\n      setAnimationCount1(0);\n      setAnimationMoveSlot1(false);\n      setAnimationStopSlot1(true);\n    }\n  }, [animationCount1]);\n\n  useEffect(() => {\n    if (animationCount2 > defaultMaxAnimationCount) {\n      setAnimationCount2(0);\n      setAnimationMoveSlot2(false);\n      setAnimationStopSlot2(true);\n    }\n  }, [animationCount2]);\n\n  useEffect(() => {\n    if (animationCount3 > defaultMaxAnimationCount) {\n      setAnimationCount3(0);\n      setAnimationMoveSlot3(false);\n      setAnimationStopSlot3(true);\n    }\n  }, [animationCount3]);\n\n  useEffect(() => {\n    if (animationCount4 > defaultMaxAnimationCount) {\n      setAnimationCount4(0);\n      setAnimationMoveSlot4(false);\n      setAnimationStopSlot4(true);\n    }\n  }, [animationCount4]);\n\n  useEffect(() => {\n    if (animationCount5 > defaultMaxAnimationCount) {\n      setAnimationCount5(0);\n      setAnimationMoveSlot5(false);\n      setAnimationStopSlot5(true);\n    }\n  }, [animationCount5]);\n\n  /* use efect to start game process */\n\n  useEffect(() => {\n    if (startGame) {\n      /* hide previus win lines */\n\n      setShowResult(false);\n      setWinLineTopSlot1(false);\n      setwinLineMiddleSlot1(false);\n      setwinLineBottomSlot1(false);\n\n      setWinLineTopSlot2(false);\n      setwinLineMiddleSlot2(false);\n      setwinLineBottomSlot2(false);\n\n      setWinLineTopSlot3(false);\n      setwinLineMiddleSlot3(false);\n      setwinLineBottomSlot3(false);\n\n      setWinLineTopSlot4(false);\n      setwinLineMiddleSlot4(false);\n      setwinLineBottomSlot4(false);\n\n      setWinLineTopSlot5(false);\n      setwinLineMiddleSlot5(false);\n      setwinLineBottomSlot5(false);\n\n      /* starting game process,\n      adding class with infinite rotation to slots */\n\n      setAnimationStopSlot1(false);\n      setSlotItems1(getNewOrderSlides());\n      setAnimationMoveSlot1(true);\n\n      setTimeout(() => {\n        setAnimationStopSlot2(false);\n        setSlotItems2(getNewOrderSlides());\n        setAnimationMoveSlot2(true);\n      }, timeGapBetweanSlots);\n\n      setTimeout(() => {\n        setAnimationStopSlot3(false);\n        setSlotItems3(getNewOrderSlides());\n        setAnimationMoveSlot3(true);\n      }, timeGapBetweanSlots * 2);\n\n      setTimeout(() => {\n        setAnimationStopSlot4(false);\n        setSlotItems4(getNewOrderSlides());\n        setAnimationMoveSlot4(true);\n      }, timeGapBetweanSlots * 3);\n\n      setTimeout(() => {\n        setAnimationStopSlot5(false);\n        setSlotItems5(getNewOrderSlides());\n        setAnimationMoveSlot5(true);\n\n        /* after 5 seconds(first animation duration + second, + all gaps\n        between launches of each slot), show results of game\n        )  */\n\n        setTimeout(() => {\n          setShowResult(true);\n\n          /* seting game finished  after all slots stopped */\n\n          setStartGame(false);\n        }, defaultMaxAnimationCount * 1000 + 4000);\n      }, timeGapBetweanSlots * 4);\n    }\n  }, [startGame]);\n\n  useEffect(() => {\n    if (showResult) {\n      /* show win lines for each slot */\n      /* first slot */\n\n      if (slotItems1[0].path === slotItems2[0].path) {\n        setWinLineTopSlot1(true);\n      }\n\n      if (slotItems1[1].path === slotItems2[1].path) {\n        setwinLineMiddleSlot1(true);\n      }\n\n      if (slotItems1[2].path === slotItems2[2].path) {\n        setwinLineBottomSlot1(true);\n      }\n\n      /* second slot */\n\n      if (slotItems2[0].path === slotItems3[0].path\n        || slotItems1[0].path === slotItems2[0].path) {\n        setWinLineTopSlot2(true);\n      }\n\n      if (slotItems2[1].path === slotItems3[1].path\n        || slotItems1[1].path === slotItems2[1].path) {\n        setwinLineMiddleSlot2(true);\n      }\n\n      if (slotItems2[2].path === slotItems3[2].path\n        || slotItems1[2].path === slotItems2[2].path) {\n        setwinLineBottomSlot2(true);\n      }\n\n      /* 3 slot */\n\n      if (slotItems2[0].path === slotItems3[0].path\n        || slotItems3[0].path === slotItems4[0].path) {\n        setWinLineTopSlot3(true);\n      }\n\n      if (slotItems2[1].path === slotItems3[1].path\n        || slotItems3[1].path === slotItems4[1].path) {\n        setwinLineMiddleSlot3(true);\n      }\n\n      if (slotItems2[2].path === slotItems3[2].path\n        || slotItems3[2].path === slotItems4[2].path) {\n        setwinLineBottomSlot3(true);\n      }\n\n      /* slot 4 */\n\n      if (slotItems4[0].path === slotItems3[0].path\n        || slotItems4[0].path === slotItems5[0].path) {\n        setWinLineTopSlot4(true);\n      }\n\n      if (slotItems4[1].path === slotItems3[1].path\n        || slotItems4[1].path === slotItems5[1].path) {\n        setwinLineMiddleSlot4(true);\n      }\n\n      if (slotItems4[2].path === slotItems3[2].path\n        || slotItems4[2].path === slotItems5[2].path) {\n        setwinLineBottomSlot4(true);\n      }\n\n      /* slot 5 */\n\n      if (slotItems5[0].path === slotItems4[0].path) {\n        setWinLineTopSlot5(true);\n      }\n\n      if (slotItems5[1].path === slotItems4[1].path) {\n        setwinLineMiddleSlot5(true);\n      }\n\n      if (slotItems5[2].path === slotItems4[2].path) {\n        setwinLineBottomSlot5(true);\n      }\n    }\n  }, [showResult]);\n\n  /* show app game results after all winlines updated */\n  useEffect(() => {\n    /* function which counts all occurrences in slots\n         and give points that player got\n         */\n\n    if (!showResult) {\n      return;\n    }\n\n    const getResultPoints = (\n      ...winLines\n    ) => {\n      /* checking top items */\n\n      let topPoints = 0;\n      let lastTopResult = false;\n\n      for (let i = 0; i < 4; i += 1) {\n        if (winLines[i] === winLines[i + 1]\n          && winLines[i]\n        ) {\n          topPoints += 1;\n\n          if (lastTopResult) {\n            topPoints += 10;\n          }\n          lastTopResult = true;\n        } else {\n          lastTopResult = false;\n        }\n      }\n\n      /* checking middle items */\n\n      let middlePoints = 0;\n      let lastMiddleResult = false;\n\n      for (let i = 5; i < 9; i += 1) {\n        if (winLines[i] === winLines[i + 1]\n          && winLines[i]\n        ) {\n          middlePoints += 1;\n\n          if (lastMiddleResult) {\n            middlePoints += 10;\n          }\n          lastMiddleResult = true;\n        } else {\n          lastMiddleResult = false;\n        }\n      }\n\n      /* checking bottom results */\n\n      let bottomPoints = 0;\n      let lastBottomResult = false;\n\n      for (let i = 10; i < 14; i += 1) {\n        if (winLines[i] === winLines[i + 1]\n          && winLines[i]\n        ) {\n          bottomPoints += 1;\n\n          if (lastBottomResult) {\n            bottomPoints += 10;\n          }\n          lastBottomResult = true;\n        } else {\n          lastBottomResult = false;\n        }\n      }\n\n      return topPoints + middlePoints + bottomPoints;\n    };\n\n    const gameResultPoints = getResultPoints(\n      winLineTopSlot1,\n      winLineTopSlot2,\n      winLineTopSlot3,\n      winLineTopSlot4,\n      winLineTopSlot5,\n      winLineMiddleSlot1,\n      winLineMiddleSlot2,\n      winLineMiddleSlot3,\n      winLineMiddleSlot4,\n      winLineMiddleSlot5,\n      winLineBottomSlot1,\n      winLineBottomSlot2,\n      winLineBottomSlot3,\n      winLineBottomSlot4,\n      winLineBottomSlot5,\n    );\n\n    /* Setting results of game in App component */\n\n    let textResult;\n\n    if (gameResultPoints === 1) {\n      textResult = `You got ${gameResultPoints} point ! `;\n    } else {\n      textResult = `You got ${gameResultPoints} points ! `;\n    }\n\n    setResults(textResult);\n  }, [\n    winLineTopSlot1,\n    winLineTopSlot2,\n    winLineTopSlot3,\n    winLineTopSlot4,\n    winLineTopSlot5,\n    winLineMiddleSlot1,\n    winLineMiddleSlot2,\n    winLineMiddleSlot3,\n    winLineMiddleSlot4,\n    winLineMiddleSlot5,\n    winLineBottomSlot1,\n    winLineBottomSlot2,\n    winLineBottomSlot3,\n    winLineBottomSlot4,\n    winLineBottomSlot5,\n    showResult,\n  ]);\n\n  return (\n    <div className=\"game-machine\">\n\n      <div className=\"game-machine__slots-container\">\n        <GameSlot\n          setAnimationCountHandler={() => {\n            setAnimationCount1(animationCount1 + 1);\n          }}\n          animationMove={\n            animationMoveSlot1\n          }\n\n          animationStopSlot={\n            animationStopSlot1\n          }\n\n          slides={\n            slotItems1\n          }\n\n          winLineTop={winLineTopSlot1}\n          winLineMiddle={winLineMiddleSlot1}\n          winLineBottom={winLineBottomSlot1}\n\n        />\n\n        <GameSlot\n          setAnimationCountHandler={() => {\n            setAnimationCount2(animationCount2 + 1);\n          }}\n          animationMove={\n            animationMoveSlot2\n          }\n\n          animationStopSlot={\n            animationStopSlot2\n          }\n\n          slides={\n            slotItems2\n          }\n\n          winLineTop={winLineTopSlot2}\n          winLineMiddle={winLineMiddleSlot2}\n          winLineBottom={winLineBottomSlot2}\n        />\n\n        <GameSlot\n          setAnimationCountHandler={() => {\n            setAnimationCount3(animationCount3 + 1);\n          }}\n          animationMove={\n            animationMoveSlot3\n          }\n\n          animationStopSlot={\n            animationStopSlot3\n          }\n\n          slides={\n            slotItems3\n          }\n\n          winLineTop={winLineTopSlot3}\n          winLineMiddle={winLineMiddleSlot3}\n          winLineBottom={winLineBottomSlot3}\n        />\n\n        <GameSlot\n          setAnimationCountHandler={() => {\n            setAnimationCount4(animationCount4 + 1);\n          }}\n          animationMove={\n            animationMoveSlot4\n          }\n\n          animationStopSlot={\n            animationStopSlot4\n          }\n\n          slides={\n            slotItems4\n          }\n\n          winLineTop={winLineTopSlot4}\n          winLineMiddle={winLineMiddleSlot4}\n          winLineBottom={winLineBottomSlot4}\n\n        />\n\n        <GameSlot\n          setAnimationCountHandler={() => {\n            setAnimationCount5(animationCount5 + 1);\n          }}\n          animationMove={\n            animationMoveSlot5\n          }\n\n          animationStopSlot={\n            animationStopSlot5\n          }\n\n          slides={\n            slotItems5\n          }\n\n          winLineTop={winLineTopSlot5}\n          winLineMiddle={winLineMiddleSlot5}\n          winLineBottom={winLineBottomSlot5}\n\n        />\n      </div>\n\n      <button\n        type=\"button\"\n        onClick={\n          () => {\n            setResults('');\n            setStartGame(true);\n          }}\n        className=\"game-machine__play-button\"\n      >\n        PLAY\n      </button>\n    </div>\n  );\n};\n\nGameMachine.propTypes = {\n  setResults: PropTypees.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { GameMachine } from './components/GameMachine/GameMachine';\n\nfunction App() {\n  const [gameResults, setGameResults] = useState('');\n\n  return (\n    <div className=\"app\">\n      <h1\n        className=\"app__heading\"\n      >\n        Play and find your luck!\n      </h1>\n\n      {\n        gameResults\n      && (\n        <p className=\"app__game-results\">\n          {gameResults}\n        </p>\n      )\n      }\n\n      <GameMachine\n\n        setResults={setGameResults}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}